interface rcConfig {
    void rcConfig();

    /// The width of the field along the x-axis. [Limit: >= 0] [Units: vx]
    attribute long width;

    /// The height of the field along the z-axis. [Limit: >= 0] [Units: vx]
    attribute long height;
    
    /// The width/height size of tile's on the xz-plane. [Limit: >= 0] [Units: vx]
    attribute long tileSize;
    
    /// The size of the non-navigable border around the heightfield. [Limit: >=0] [Units: vx]
    attribute long borderSize;

    /// The xz-plane cell size to use for fields. [Limit: > 0] [Units: wu] 
    attribute float cs;

    /// The y-axis cell size to use for fields. [Limit: > 0] [Units: wu]
    attribute float ch;

    /// The minimum bounds of the field's AABB. [(x, y, z)] [Units: wu]
    attribute float[] bmin; 

    /// The maximum bounds of the field's AABB. [(x, y, z)] [Units: wu]
    attribute float[] bmax;

    /// The maximum slope that is considered walkable. [Limits: 0 <= value < 90] [Units: Degrees] 
    attribute float walkableSlopeAngle;

    /// Minimum floor to 'ceiling' height that will still allow the floor area to 
    /// be considered walkable. [Limit: >= 3] [Units: vx] 
    attribute long walkableHeight;
    
    /// Maximum ledge height that is considered to still be traversable. [Limit: >=0] [Units: vx] 
    attribute long walkableClimb;
    
    /// The distance to erode/shrink the walkable area of the heightfield away from 
    /// obstructions.  [Limit: >=0] [Units: vx] 
    attribute long walkableRadius;
    
    /// The maximum allowed length for contour edges along the border of the mesh. [Limit: >=0] [Units: vx] 
    attribute long maxEdgeLen;
    
    /// The maximum distance a simplfied contour's border edges should deviate 
    /// the original raw contour. [Limit: >=0] [Units: vx]
    attribute float maxSimplificationError;
    
    /// The minimum number of cells allowed to form isolated island areas. [Limit: >=0] [Units: vx] 
    attribute long minRegionArea;
    
    /// Any regions with a span count smaller than this value will, if possible, 
    /// be merged with larger regions. [Limit: >=0] [Units: vx] 
    attribute long mergeRegionArea;
    
    /// The maximum number of vertices allowed for polygons generated during the 
    /// contour to polygon conversion process. [Limit: >= 3] 
    attribute long maxVertsPerPoly;
    
    /// Sets the sampling distance to use when generating the detail mesh.
    /// (For height detail only.) [Limits: 0 or >= 0.9] [Units: wu] 
    attribute float detailSampleDist;
    
    /// The maximum distance the detail mesh surface should deviate from heightfield
    /// data. (For height detail only.) [Limit: >=0] [Units: wu] 
    attribute float detailSampleMaxError;
};

interface Vec3 {
    attribute float x;
    attribute float y;
    attribute float z;

    void Vec3();
    void Vec3(float x, float y, float z);
};

interface Triangle {
    void Triangle();

    [Const, Ref] Vec3 getPoint(long n);
};

interface DebugNavMesh {
    void DebugNavMesh();

    long getTriangleCount();
    [Const, Ref] Triangle getTriangle(long n);
};

interface dtNavMesh {

};

interface dtNavMeshCreateParams {
    readonly attribute unsigned short[] verts;
    attribute long vertCount;
    readonly attribute unsigned short[] polys;
    readonly attribute unsigned short[] polyFlags;
    readonly attribute octet[] polyAreas;
    attribute long polyCount;
    attribute long nvp;

    readonly attribute unsigned long[] detailMeshes;
    readonly attribute float[] detailVerts;
    attribute long detailVertsCount;
    readonly attribute octet[] detailTris;
    attribute long detailTriCount;

    readonly attribute float[] offMeshConVerts;
    readonly attribute float[] offMeshConRad;
    readonly attribute unsigned short[] offMeshConFlags;
    readonly attribute octet[] offMeshConAreas;
    readonly attribute octet[] offMeshConDir;
    readonly attribute unsigned long[] offMeshConUserID;
    attribute long offMeshConCount;

    attribute unsigned long userId;
    attribute long tileX;
    attribute long tileY;
    attribute long tileLayer;
    attribute float[] bmin;
    attribute float[] bmax;

    attribute float walkableHeight;
    attribute float walkableRadius;
    attribute float walkableClimb;
    attribute float cs;
    attribute float ch;

    attribute boolean buildBvTree;
};

interface NavMeshCreateParams {
    void NavMeshCreateParams();

    [Value] dtNavMeshCreateParams getParams();

    void setVerts(unsigned short[] verts);
    void setVertCount(long vertCount);
    void setPolys(unsigned short[] polys);
    void setPolyFlags(unsigned short[] polyFlags);
    void setPolyAreas(octet[] polyAreas);
    void setPolyCount(long polyCount);
    void setNvp(long nvp);

    void setDetailMeshes(unsigned long[] detailMeshes);
    void setDetailVerts(float[] detailVerts);
    void setDetailVertsCount(long detailVertsCount);
    void setDetailTris(octet[] detailTris);
    void setDetailTriCount(long detailTriCount);

    void setOffMeshConVerts(float[] offMeshConVerts);
    void setOffMeshConRad(float[] offMeshConRad);
    void setOffMeshConFlags(unsigned short[] offMeshConFlags);
    void setOffMeshConAreas(octet[] offMeshConAreas);
    void setOffMeshConDir(octet[] offMeshConDir);
    void setOffMeshConUserID(unsigned long[] offMeshConUserID);
    void setOffMeshConCount(long offMeshConCount);

    void setUserId(unsigned long userId);
    void setTileX(long tileX);
    void setTileY(long tileY);
    void setTileLayer(long tileLayer);
    void setBmin(float[] bmin);
    void setBmax(float[] bmax);

    void setWalkableHeight(float walkableHeight);
    void setWalkableRadius(float walkableRadius);
    void setWalkableClimb(float walkableClimb);
    void setCs(float cs);
    void setCh(float ch);

    void setBuildBvTree(boolean buildBvTree);
};

interface NavPath
{
    long getPointCount();
    [Const, Ref] Vec3 getPoint(long n);
};

interface dtObstacleRef {

};

interface dtCompressedTileRef {

};

interface dtNavMeshParams {
    attribute float[] orig;
    attribute float tileWidth;
    attribute float tileHeight;
    attribute long maxTiles;
    attribute long maxPolys;
};

interface dtCrowdAgentParams {
    void dtCrowdAgentParams();

    /// Agent radius. [Limit: >= 0]
    attribute float radius;                        
    
    /// Agent height. [Limit: > 0]
    attribute float height;                        
    
    /// Maximum allowed acceleration. [Limit: >= 0]
    attribute float maxAcceleration;                
    
    /// Maximum allowed speed. [Limit: >= 0]
    attribute float maxSpeed;                        

    /// Defines how close a collision element must be before it is considered for steering behaviors. [Limits: > 0]
    attribute float collisionQueryRange;

    /// The path visibility optimization range. [Limit: > 0]
    attribute float pathOptimizationRange;        

    /// How aggresive the agent manager should be at avoiding collisions with this agent. [Limit: >= 0]
    attribute float separationWeight;

    /// Flags that impact steering behavior. (See: #UpdateFlags)
    attribute octet updateFlags;

    /// The index of the avoidance configuration to use for the agent. 
    /// [Limits: 0 <= value <= #DT_CROWD_MAX_OBSTAVOIDANCE_PARAMS]
    attribute octet obstacleAvoidanceType;    

    /// The index of the query filter used by this agent.
    attribute octet queryFilterType;

    /// User defined data attached to the agent.
    attribute VoidPtr userData;
};

interface CreateNavMeshDataResult {
    attribute boolean success;
    attribute octet[] navMeshData;
    attribute long navMeshDataSize;
};

interface NavMeshBuilder {
    void NavMeshBuilder();

    [Value] CreateNavMeshDataResult createNavMeshData([Ref] NavMeshCreateParams params);
};

interface NavMeshGeneratorResult {
    attribute boolean success;
    [Const, Ref] NavMesh getNavMesh();
    [Const, Ref] TileCache getTileCache();
};

interface NavMeshGenerator {
    void NavMeshGenerator();

    [Value] NavMeshGeneratorResult generate([Const] float[] positions, [Const] long positionCount, [Const] long[] indices, [Const] long indexCount, [Const, Ref] rcConfig config);
};

interface NavMeshImporterResult {
    [Const, Ref] NavMesh getNavMesh();
    [Const, Ref] TileCache getTileCache();
};

interface NavMeshImporter {
    void NavMeshImporter();

    [Value] NavMeshImporterResult importNavMesh(NavMeshExport data);
};

interface NavMeshExport {
    attribute any dataPointer;
    attribute long size;

    void NavMeshExport();
};

interface NavMeshExporter {
    void NavMeshExporter();

    [Value] NavMeshExport exportNavMesh(NavMesh navMesh, TileCache tileCache);
    void freeNavMeshExport(NavMeshExport navMeshExport);
};

interface NavMeshAddTileResult {
    attribute unsigned long status;
    attribute unsigned long tileRef; 
};

interface NavMesh {
    void NavMesh();

    boolean initSolo(octet[] data, [Const] long dataSize, [Const] long flags);
    boolean initTiled([Const] dtNavMeshParams params);
    [Value] NavMeshAddTileResult addTile(octet[] data, long dataSize, long flags, unsigned long lastRef);
    void destroy();
    [Value] DebugNavMesh getDebugNavMesh();
    dtNavMesh getNavMesh();
};

interface NavMeshQuery {
    void NavMeshQuery(NavMesh navMesh, [Const] long maxNodes);

    void destroy();
    [Value] Vec3 getClosestPoint([Const, Ref] Vec3 position);
    [Value] Vec3 getRandomPointAround([Const, Ref] Vec3 position, float maxRadius);
    [Value] Vec3 moveAlong([Const, Ref] Vec3 position, [Const, Ref] Vec3 destination);
    [Value] NavPath computePath([Const, Ref] Vec3 start, [Const, Ref] Vec3 end);
    void setDefaultQueryExtent([Const, Ref] Vec3 extent);
    [Value] Vec3 getDefaultQueryExtent();
};

interface dtTileCacheParams {
    attribute float[] orig;
    attribute float cs;
    attribute float ch;
    attribute long width;
    attribute long height;
    attribute float walkableHeight;
    attribute float walkableRadius;
    attribute float walkableClimb;
    attribute float maxSimplificationError;
    attribute long maxTiles;
    attribute long maxObstacles;
};

interface TileCacheAddTileResult {
    attribute unsigned long status;
    attribute unsigned long tileRef;
};

interface TileCacheUpdateResult {
    attribute unsigned long status;
    attribute boolean upToDate;
};

interface TileCache {
    void TileCache();

    boolean init([Const, Ref] dtTileCacheParams params);
    [Value] TileCacheAddTileResult addTile(octet[] data, [Const] long dataSize, octet flags);
    unsigned long buildNavMeshTile([Const] dtCompressedTileRef ref, NavMesh navMesh);
    unsigned long buildNavMeshTilesAt([Const] long tx, [Const] long ty, NavMesh navMesh);
    [Value] TileCacheUpdateResult update(NavMesh navMesh);
    dtObstacleRef addCylinderObstacle([Const, Ref] Vec3 position, float radius, float height);
    dtObstacleRef addBoxObstacle([Const, Ref] Vec3 position, [Const, Ref] Vec3 extent, float angle);
    void removeObstacle(dtObstacleRef obstacle);
    void destroy();
};

interface Crowd {
    void Crowd([Const] long maxAgents, [Const] float maxAgentRadius, NavMesh navMesh);

    void destroy();
    long addAgent([Const, Ref] Vec3 position, [Const] dtCrowdAgentParams params);
    void removeAgent([Const] long idx);
    void update([Const] float dt);
    long getAgentCount();
    long getActiveAgentCount();
    [Value] Vec3 getAgentPosition([Const] long idx);
    [Value] Vec3 getAgentVelocity([Const] long idx);
    [Value] Vec3 getAgentNextTargetPath([Const] long idx);
    long getAgentState([Const] long idx);
    boolean overOffMeshConnection([Const] long idx);
    void agentGoto([Const] long idx, [Const, Ref] Vec3 destination);
    void agentResetMoveTarget([Const] long idx);
    void agentTeleport([Const] long idx, [Const, Ref] Vec3 destination);
    [Value] dtCrowdAgentParams getAgentParameters([Const] long idx);
    void setAgentParameters([Const] long idx, [Const] dtCrowdAgentParams params);
    void setDefaultQueryExtent([Const, Ref] Vec3 extent);
    [Value] Vec3 getDefaultQueryExtent();
    [Value] NavPath getCorners([Const] long idx);
};

